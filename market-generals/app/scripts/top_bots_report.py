import asyncio
from datetime import datetime, timezone

from sqlalchemy import select, func, update
from app.db.base import DatabaseSessionManager
from app.config import settings
from app.db.models import TestOrder, TestBot

UTC = timezone.utc


async def update_bot_profits():

    dsm = DatabaseSessionManager.create(settings.DB_URL)
    async with dsm.get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        bots_result = await session.execute(select(TestBot))
        bots = bots_result.scalars().all()

        now = datetime.now(UTC)

        updates = []

        for bot in bots:
            # –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å
            total_stmt = select(
                func.coalesce(func.sum(TestOrder.profit_loss), 0)
            ).where(TestOrder.bot_id == bot.id)

            total_profit = (await session.execute(total_stmt)).scalar_one()

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç–µ
            await session.execute(
                update(TestBot)
                .where(TestBot.id == bot.id)
                .values(
                    total_profit=total_profit,
                )
            )

            updates.append((bot.id, total_profit))

        await session.commit()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø 10
        updates.sort(key=lambda x: x[1], reverse=True)

        print(
            f"üìä –¢–æ–ø 10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "
            f"–Ω–∞ {now.strftime('%Y-%m-%d %H:%M:%S')}:\n"
        )
        for idx, (bot_id, total_profit) in enumerate(updates[:10], 1):
            print(f"{idx}. –ë–æ—Ç {bot_id} ‚Äî –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.4f}")


def main():
    print("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–æ–≤...\n")
    asyncio.run(update_bot_profits())


if __name__ == "__main__":
    main()
