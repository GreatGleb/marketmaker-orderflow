"""Update by timezone

Revision ID: 463fec2d1de4
Revises: bd886f613cad
Create Date: 2025-07-17 18:06:26.004737

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "463fec2d1de4"
down_revision = "bd886f613cad"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "asset_exchange_specs",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_exchange_specs",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_history",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_history",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_order_book",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_order_book",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_pairs",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_pairs",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_volume_volatility",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_volume_volatility",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "market_orders",
        "client_order_id",
        existing_type=sa.VARCHAR(),
        comment="Client-generated order ID",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "exchange_name",
        existing_type=sa.VARCHAR(),
        comment="Name of the exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "exchange_order_id",
        existing_type=sa.VARCHAR(),
        comment="Order ID from the exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "symbol",
        existing_type=sa.VARCHAR(),
        comment="Trading symbol, e.g., BTCUSDT",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "side",
        existing_type=sa.VARCHAR(),
        comment="Order side (BUY/SELL)",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "position_side",
        existing_type=sa.VARCHAR(),
        comment="Position side (LONG/SHORT/BOTH)",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "quote_quantity",
        existing_type=sa.NUMERIC(),
        comment="Quantity in quote asset",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "asset_quantity",
        existing_type=sa.NUMERIC(),
        comment="Quantity in base asset",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_order_type",
        existing_type=sa.VARCHAR(),
        comment="Type of order used to open position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_order_type",
        existing_type=sa.VARCHAR(),
        comment="Type of order used to close position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "start_price",
        existing_type=sa.NUMERIC(),
        comment="Price at which the order was initiated",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "activation_price",
        existing_type=sa.NUMERIC(),
        comment="Price at which the order became active",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_price",
        existing_type=sa.NUMERIC(),
        comment="Execution price for opening the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_price",
        existing_type=sa.NUMERIC(),
        comment="Execution price for closing the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_commission",
        existing_type=sa.NUMERIC(),
        comment="Commission paid for opening the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_commission",
        existing_type=sa.NUMERIC(),
        comment="Commission paid for closing the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "activation_time",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp when order became active",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_time",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp when position was opened",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_time",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp when position was closed",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_reason",
        existing_type=sa.VARCHAR(),
        comment="Reason for closing the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "start_updown_ticks",
        existing_type=sa.INTEGER(),
        comment="Initial price movement in ticks",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "trailing_stop_lose_ticks",
        existing_type=sa.INTEGER(),
        comment="Trailing stop loss in ticks",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "trailing_stop_win_ticks",
        existing_type=sa.INTEGER(),
        comment="Trailing stop win in ticks",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "status",
        existing_type=sa.VARCHAR(),
        comment="Current status of the order",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "exchange_status",
        existing_type=sa.VARCHAR(),
        comment="Status of the order on the exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "profit_loss",
        existing_type=sa.NUMERIC(),
        comment="Profit or loss from the order",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "market_orders",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "test_bots",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "test_bots",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "test_orders",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "test_orders",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "watched_pair",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "watched_pair",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "watched_pair",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "watched_pair",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "test_orders",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "test_orders",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "test_bots",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "test_bots",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "market_orders",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "market_orders",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "market_orders",
        "profit_loss",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Profit or loss from the order",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "exchange_status",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Status of the order on the exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "status",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Current status of the order",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "trailing_stop_win_ticks",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Trailing stop win in ticks",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "trailing_stop_lose_ticks",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Trailing stop loss in ticks",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "start_updown_ticks",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Initial price movement in ticks",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_reason",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Reason for closing the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_time",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp when position was closed",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_time",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp when position was opened",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "activation_time",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp when order became active",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_commission",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Commission paid for closing the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_commission",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Commission paid for opening the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_price",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Execution price for closing the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_price",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Execution price for opening the position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "activation_price",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Price at which the order became active",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "start_price",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Price at which the order was initiated",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "close_order_type",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Type of order used to close position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "open_order_type",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Type of order used to open position",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "asset_quantity",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Quantity in base asset",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "quote_quantity",
        existing_type=sa.NUMERIC(),
        comment=None,
        existing_comment="Quantity in quote asset",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "position_side",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Position side (LONG/SHORT/BOTH)",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "side",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Order side (BUY/SELL)",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "symbol",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Trading symbol, e.g., BTCUSDT",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "exchange_order_id",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Order ID from the exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "exchange_name",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Name of the exchange",
        existing_nullable=True,
    )
    op.alter_column(
        "market_orders",
        "client_order_id",
        existing_type=sa.VARCHAR(),
        comment=None,
        existing_comment="Client-generated order ID",
        existing_nullable=True,
    )
    op.alter_column(
        "asset_volume_volatility",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_volume_volatility",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_pairs",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_pairs",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_order_book",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_order_book",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_history",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_history",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_exchange_specs",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of update",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "asset_exchange_specs",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_comment="Date and time of create",
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    # ### end Alembic commands ###
