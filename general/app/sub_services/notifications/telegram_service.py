import aiohttp
import asyncio
import logging
from typing import Optional, Dict
from datetime import datetime
from enum import Enum

from app.config import settings

logger = logging.getLogger(__name__)


class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    TEST_BOT = "test_bot"
    CELERY_ERROR = "celery_error"


class TelegramNotificationService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤
    """

    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"

    @staticmethod
    def _get_chat_id(notification_type: NotificationType) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç chat_id –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            chat_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        if notification_type == NotificationType.TEST_BOT:
            return settings.TELEGRAM_TEST_BOT_CHAT_ID
        elif notification_type == NotificationType.CELERY_ERROR:
            return settings.TELEGRAM_CELERY_CHAT_ID

        return None

    @staticmethod
    def _get_topic_id(notification_type: NotificationType) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç topic –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Returns:
            chat_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        if notification_type == NotificationType.TEST_BOT:
            return settings.TELEGRAM_TEST_BOT_TOPIC_ID
        elif notification_type == NotificationType.CELERY_ERROR:
            return settings.TELEGRAM_CELERY_TOPIC_ID

        return None

    async def send_message(
        self,
        message: str,
        chat_id: str,
        message_thread_id: str,
        parse_mode: str = "HTML",
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            message_thread_id: ID topic –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)

        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not chat_id:
            logger.warning("Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False

        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "message_thread_id": message_thread_id,
                    "text": message,
                    "parse_mode": parse_mode,
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram —á–∞—Ç {chat_id}: {response.status} - {error_text}"
                        )
                        return False

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —á–∞—Ç {chat_id}: {e}"
            )
            return False

    async def send_bot_error_notification(
        self,
        bot_id: int,
        error_message: str,
        additional_info: Optional[str] = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–æ—Ç–∞ –≤ Telegram

        Args:
            bot_id: ID –±–æ—Ç–∞
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        message = f"""
üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>

üìä <b>ID –±–æ—Ç–∞:</b> {bot_id}
‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
üåç <b>Environment:</b> {settings.ENVIRONMENT}
‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}
"""

        if additional_info:
            message += f"\nüìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {additional_info}"

        chat_id = self._get_chat_id(NotificationType.TEST_BOT)
        topic_id = self._get_topic_id(NotificationType.TEST_BOT)
        return await self.send_message(
            message=message, chat_id=chat_id, message_thread_id=topic_id
        )

    async def send_celery_error_notification(
        self,
        task_name: str,
        error_message: str,
        additional_info: Optional[str] = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ Celery –≤ Telegram

        Args:
            task_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ Celery
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        message = f"""
üîß <b>–û—à–∏–±–∫–∞ Celery –∑–∞–¥–∞—á–∏</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task_name}
‚è∞ <b>–í—Ä–µ–º—è:</b> {timestamp}
üåç <b>Environment:</b> {settings.ENVIRONMENT}
‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}
"""

        if additional_info:
            message += f"\nüìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {additional_info}"

        chat_id = self._get_chat_id(NotificationType.CELERY_ERROR)
        topic_id = self._get_topic_id(NotificationType.CELERY_ERROR)
        return await self.send_message(
            message=message, chat_id=chat_id, message_thread_id=topic_id
        )
